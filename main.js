/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

const DEFAULT_SETTINGS = {};
const A_TAG = new RegExp(/^\s*<a.*?>.*?<\/a>\s*$/);

class SettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        let { containerEl } = this;
        containerEl.empty();
    }
}

class EmojiSuggester extends obsidian.EditorSuggest {
    constructor(plugin) {
        super(plugin.app);
        this.options = ["type1", "type2", "another", "more"];
        this.plugin = plugin;
    }
    onTrigger(cursor, editor) {
        const sub = editor.getLine(cursor.line).substring(0, cursor.ch);
        const match = sub.match(/<a[\s\w]*?(\w*)$/);
        const query = match === null || match === void 0 ? void 0 : match[1].trim();
        if (query !== undefined) {
            return {
                end: cursor,
                start: {
                    ch: match.index,
                    line: cursor.line,
                },
                query,
            };
        }
        return null;
    }
    getSuggestions(context) {
        if (context.query === "") {
            return this.options;
        }
        return this.options.filter((p) => p.includes(context.query.replace("<a", "")));
    }
    renderSuggestion(suggestion, el) {
        const outer = el.createDiv({ cls: "SL-suggester-container" });
        outer.createDiv().setText(suggestion);
    }
    selectSuggestion(suggestion) {
        const { editor, query, start, end } = this.context;
        const range = editor.getRange(start, end);
        const realStart = editor.posToOffset(editor.getCursor()) - query.length;
        if (this.context) {
            editor.replaceRange(`${range[range.length - 1] === " " ? "" : " "}${suggestion} `, editor.offsetToPos(realStart), end);
        }
    }
}

class SLPlugin extends obsidian.Plugin {
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.loadSettings();
            this.registerEditorSuggest(new EmojiSuggester(this));
            this.addCommand({
                id: "cmd",
                name: "Command",
                callback: () => __awaiter(this, void 0, void 0, function* () {
                    console.time("cmd");
                    console.log(yield this.getSLs(this.app.workspace.getActiveFile()));
                    console.timeEnd("cmd");
                }),
            });
            this.addSettingTab(new SettingTab(this.app, this));
        });
    }
    onunload() { }
    // parseAttrs(attrs: string): ParsedSemanticLink {
    // }
    // async getSLs(file: TFile): Promise<ParsedSemanticLink[]> {
    //   const SLs: ParsedSemanticLink[] = [];
    //   const { links } = this.app.metadataCache.getFileCache(file);
    //   if (!links) return;
    //   const content = await this.app.vault.cachedRead(file);
    //   const matches = [...content.matchAll(SL_ELEMENT)];
    //   matches.forEach((match) => {
    //     console.log({ match });
    //     const [text, index] = [match[0], match.index];
    //     const lBefore = links.find((l) => l.position.end.offset + 1 === index);
    //     const lAfter = links.find(
    //       (l) => l.position.start.offset - 1 === index + text.length
    //     );
    //     if (!lBefore && !lAfter) return;
    //     var { firstChild } = createEl("a", {}, (el) => (el.innerHTML = text));
    //     const attrs = [...firstChild.attributes];
    //     const currSL: ParsedSemanticLink = { inner: "" };
    //     currSL.from = lBefore.link;
    //     currSL.to = lAfter.link;
    //     currSL.inner = firstChild.innerText;
    //     attrs.forEach((attr) => {
    //       const { name, value } = attr;
    //       currSL[name] = value === "" ? true : value;
    //     });
    //     SLs.push(currSL);
    //   });
    //   return SLs;
    // }
    // async getSL(file: TFile): Promise<ParsedSemanticLink[]> {
    //   const { links } = this.app.metadataCache.getFileCache(file);
    //   if (!links) return;
    //   const content = await this.app.vault.cachedRead(file);
    //   const tempLinks: { link: LinkCache; aBefore: string; aAfter: string }[] =
    //     [];
    //   links.forEach((l) => {
    //     const {
    //       position: { start, end },
    //     } = l;
    //     const sOff = start.offset;
    //     const eOff = end.offset;
    //     const tBefore = content.slice(0, sOff === 0 ? 0 : sOff - 1);
    //     const tAfter = content.slice(
    //       eOff === content.length ? content.length : eOff + 1
    //     );
    //     const aBefore = tBefore.split("<a").last();
    //     const aAfter = tAfter.split("</a>").first();
    //     const currLink: { link: LinkCache; aBefore: string; aAfter: string } = {
    //       link: l,
    //       aBefore: undefined,
    //       aAfter: undefined,
    //     };
    //     if (aBefore) currLink.aBefore = "<a" + aBefore;
    //     if (aAfter) currLink.aAfter = aAfter + "</a>";
    //     tempLinks.push(currLink);
    //   });
    //   console.log(tempLinks);
    //   const SLs: ParsedSemanticLink[] = [];
    //   tempLinks.forEach((currL) => {
    //     const matchingLink = tempLinks.find(
    //       (l) =>
    //         currL.aAfter &&
    //         currL.link.position.end.offset + 2 + currL.aAfter.length ===
    //           l.link.position.start.offset
    //     );
    //     console.log({ matchingLink });
    //     if (matchingLink !== undefined) {
    //       var { firstChild } = createEl(
    //         "a",
    //         {},
    //         (el) => (el.innerHTML = matchingLink.aBefore)
    //       );
    //       const attrs = [...firstChild.attributes];
    //       const currSL: ParsedSemanticLink = { inner: "" };
    //       currSL.from = currL.link.link;
    //       currSL.to = matchingLink.link.link;
    //       currSL.inner = firstChild.innerText;
    //       attrs.forEach((attr) => {
    //         const { name, value } = attr;
    //         currSL[name] = value === "" ? true : value;
    //       });
    //       SLs.push(currSL);
    //     }
    //   });
    //   console.log({ SLs });
    // }
    getSLs(file) {
        return __awaiter(this, void 0, void 0, function* () {
            const { links } = this.app.metadataCache.getFileCache(file);
            if (!links)
                return;
            const SLs = [];
            const content = yield this.app.vault.cachedRead(file);
            links.forEach((curr, i) => {
                var _a;
                const next = links[i + 1];
                if (!next)
                    return;
                const currE = curr.position.end.offset;
                const nextS = next.position.start.offset;
                const between = content.slice(currE, nextS);
                const tag = (_a = between.match(A_TAG)) === null || _a === void 0 ? void 0 : _a[0];
                if (tag) {
                    var { firstChild } = createEl("div", {}, (el) => (el.innerHTML = tag.trim()));
                    const currSL = {
                        inner: firstChild.innerText,
                        from: curr.link,
                        to: next.link,
                    };
                    [...firstChild.attributes].forEach((attr) => {
                        const { name, value } = attr;
                        currSL[name] = value || true;
                    });
                    SLs.push(currSL);
                }
            });
            return SLs;
        });
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
}

module.exports = SLPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
